{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\herbata9\\\\Desktop\\\\Filip\\\\programming\\\\strony\\\\book\\\\client\\\\src\\\\DoctorCalendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'; // Import Navigate and useParams\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DoctorCalendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDay, setSelectedDay] = useState(null); // State to store selected day\n  const {\n    lekarz\n  } = useParams(); // Get the value of lekarz from URL\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  const prevMonth = () => {\n    setCurrentDate(prevDate => {\n      const prevMonthDate = new Date(prevDate);\n      prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);\n      return prevMonthDate;\n    });\n  };\n  const nextMonth = () => {\n    setCurrentDate(prevDate => {\n      const nextMonthDate = new Date(prevDate);\n      nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);\n      return nextMonthDate;\n    });\n  };\n  const handleDayButtonClick = day => {\n    console.log('Button clicked for day:', day);\n    setSelectedDay(day); // Set selected day\n  };\n  const month = currentDate.toLocaleString('default', {\n    month: 'long'\n  });\n  const year = currentDate.getFullYear();\n  const generateDaysInMonth = () => {\n    const firstDayOfMonth = new Date(year, currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(year, currentDate.getMonth() + 1, 0);\n    const daysInMonth = lastDayOfMonth.getDate();\n    const firstDayOfWeek = firstDayOfMonth.getDay();\n    const today = moment().format('YYYY-MM-DD');\n    const days = [];\n    let currentWeek = [];\n    for (let i = 0; i < firstDayOfWeek; i++) {\n      currentWeek.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"calendar-day\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this));\n    }\n    for (let i = 1; i <= daysInMonth; i++) {\n      const currentDay = moment(new Date(year, currentDate.getMonth(), i)).format('YYYY-MM-DD');\n      const isSunday = new Date(year, currentDate.getMonth(), i).getDay() === 0; // Sprawdzenie, czy dzieÅ„ to niedziela\n\n      currentWeek.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: `calendar-day ${isSunday ? 'sunday' : ''}`,\n        children: isSunday ? i : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDayButtonClick(currentDay),\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, `day-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this));\n      if (currentWeek.length === 7 || i === daysInMonth) {\n        days.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: currentWeek\n        }, `week-${days.length}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }, this));\n        currentWeek = [];\n      }\n    }\n    return days;\n  };\n\n  // Render HourPicker component if selectedDay is not null\n  if (selectedDay) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/hourpicker/${selectedDay}/${lekarz}`,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n    {/* Przekierowanie do /hourpicker z wybranym dniem i lekarzem */}\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `${month} ${year}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"calendar-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sun\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Mon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Tue\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Wed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Thu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Fri\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Sat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: generateDaysInMonth()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(DoctorCalendar, \"Nf5NEGRCsOnVGuuERS9x57OwHUs=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = DoctorCalendar;\nexport default DoctorCalendar;\nvar _c;\n$RefreshReg$(_c, \"DoctorCalendar\");","map":{"version":3,"names":["React","useState","useEffect","moment","Navigate","useNavigate","useParams","jsxDEV","_jsxDEV","DoctorCalendar","_s","currentDate","setCurrentDate","Date","selectedDay","setSelectedDay","lekarz","navigate","prevMonth","prevDate","prevMonthDate","setMonth","getMonth","nextMonth","nextMonthDate","handleDayButtonClick","day","console","log","month","toLocaleString","year","getFullYear","generateDaysInMonth","firstDayOfMonth","lastDayOfMonth","daysInMonth","getDate","firstDayOfWeek","getDay","today","format","days","currentWeek","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","currentDay","isSunday","children","onClick","length","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/herbata9/Desktop/Filip/programming/strony/book/client/src/DoctorCalendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'; // Import Navigate and useParams\r\n\r\nconst DoctorCalendar = () => {\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDay, setSelectedDay] = useState(null); // State to store selected day\r\n  const { lekarz } = useParams(); // Get the value of lekarz from URL\r\n  const navigate = useNavigate(); // Hook for programmatic navigation\r\n\r\n  const prevMonth = () => {\r\n    setCurrentDate(prevDate => {\r\n      const prevMonthDate = new Date(prevDate);\r\n      prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);\r\n      return prevMonthDate;\r\n    });\r\n  };\r\n\r\n  const nextMonth = () => {\r\n    setCurrentDate(prevDate => {\r\n      const nextMonthDate = new Date(prevDate);\r\n      nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);\r\n      return nextMonthDate;\r\n    });\r\n  };\r\n\r\n  const handleDayButtonClick = (day) => {\r\n    console.log('Button clicked for day:', day);\r\n    setSelectedDay(day); // Set selected day\r\n  };\r\n\r\n  const month = currentDate.toLocaleString('default', { month: 'long' });\r\n  const year = currentDate.getFullYear();\r\n\r\n  const generateDaysInMonth = () => {\r\n    const firstDayOfMonth = new Date(year, currentDate.getMonth(), 1);\r\n    const lastDayOfMonth = new Date(year, currentDate.getMonth() + 1, 0);\r\n    const daysInMonth = lastDayOfMonth.getDate();\r\n    const firstDayOfWeek = firstDayOfMonth.getDay();\r\n    const today = moment().format('YYYY-MM-DD');\r\n\r\n    const days = [];\r\n    let currentWeek = [];\r\n\r\n    for (let i = 0; i < firstDayOfWeek; i++) {\r\n      currentWeek.push(<td key={`empty-${i}`} className=\"calendar-day\"></td>);\r\n    }\r\n\r\n    for (let i = 1; i <= daysInMonth; i++) {\r\n      const currentDay = moment(new Date(year, currentDate.getMonth(), i)).format('YYYY-MM-DD');\r\n      const isSunday = new Date(year, currentDate.getMonth(), i).getDay() === 0; // Sprawdzenie, czy dzieÅ„ to niedziela\r\n\r\n      currentWeek.push(\r\n        <td key={`day-${i}`} className={`calendar-day ${isSunday ? 'sunday' : ''}`}>\r\n          {isSunday ? (\r\n            i\r\n          ) : (\r\n            <button onClick={() => handleDayButtonClick(currentDay)}>{i}</button>\r\n          )}\r\n        </td>\r\n      );\r\n\r\n      if (currentWeek.length === 7 || i === daysInMonth) {\r\n        days.push(<tr key={`week-${days.length}`}>{currentWeek}</tr>);\r\n        currentWeek = [];\r\n      }\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  // Render HourPicker component if selectedDay is not null\r\n  if (selectedDay) {\r\n    return <Navigate to={`/hourpicker/${selectedDay}/${lekarz}`} replace />; {/* Przekierowanie do /hourpicker z wybranym dniem i lekarzem */}\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{`${month} ${year}`}</h2>\r\n      <div className=\"calendar-container\">\r\n        <button onClick={prevMonth}>Previous Month</button>\r\n        <table className=\"calendar-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Sun</th>\r\n              <th>Mon</th>\r\n              <th>Tue</th>\r\n              <th>Wed</th>\r\n              <th>Thu</th>\r\n              <th>Fri</th>\r\n              <th>Sat</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{generateDaysInMonth()}</tbody>\r\n        </table>\r\n        <button onClick={nextMonth}>Next Month</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DoctorCalendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}