{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\boking_system-main\\\\client\\\\src\\\\Calendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Calendar.css';\nimport moment from 'moment';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'; // Import Navigate and useParams\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = () => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [calendarDays, setCalendarDays] = useState([]);\n  const [columnDate, setColumnDate] = useState(\"\");\n  const [selectedDay, setSelectedDay] = useState(null); // State to store selected day\n  const {\n    lekarz\n  } = useParams(); // Get the value of lekarz from URL\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  useEffect(() => {\n    // Usunięto zbędne wywołanie do API /api/calendar\n    const formattedDays = []; // Dummy data to simulate calendar days\n    setCalendarDays(formattedDays); // Set dummy data\n    if (formattedDays.length > 0) {\n      setColumnDate(moment(formattedDays[0]).format('YYYY-MM-DD')); // Set columnDate from the first day\n    }\n  }, []);\n  const prevMonth = () => {\n    setCurrentDate(prevDate => {\n      const prevMonthDate = new Date(prevDate);\n      prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);\n      return prevMonthDate;\n    });\n  };\n  const nextMonth = () => {\n    setCurrentDate(prevDate => {\n      const nextMonthDate = new Date(prevDate);\n      nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);\n      return nextMonthDate;\n    });\n  };\n  const handleDayButtonClick = day => {\n    console.log('Button clicked for day:', day);\n    setSelectedDay(day); // Set selected day\n  };\n  const month = currentDate.toLocaleString('default', {\n    month: 'long'\n  });\n  const year = currentDate.getFullYear();\n  const generateDaysInMonth = () => {\n    const firstDayOfMonth = new Date(year, currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(year, currentDate.getMonth() + 1, 0);\n    const daysInMonth = lastDayOfMonth.getDate();\n    const firstDayOfWeek = firstDayOfMonth.getDay();\n    const today = moment().format('YYYY-MM-DD');\n    const days = [];\n    let currentWeek = [];\n    for (let i = 0; i < firstDayOfWeek; i++) {\n      currentWeek.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: \"calendar-day\"\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 24\n      }, this));\n    }\n    for (let i = 1; i <= daysInMonth; i++) {\n      const currentDay = moment(new Date(year, currentDate.getMonth(), i)).format('YYYY-MM-DD');\n      const isDayInDatabase = calendarDays.includes(currentDay);\n      const isFutureDay = currentDay > today;\n      const isSunday = new Date(year, currentDate.getMonth(), i).getDay() === 0; // Sprawdzenie, czy dzień to niedziela\n\n      currentWeek.push( /*#__PURE__*/_jsxDEV(\"td\", {\n        className: `calendar-day}`,\n        children: isSunday ?\n        // Dodanie warunku sprawdzającego, czy dzień to niedziela\n        i : isFutureDay ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDayButtonClick(currentDay),\n          children: i\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this) : i\n      }, `day-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this));\n      if (currentWeek.length === 7 || i === daysInMonth) {\n        days.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: currentWeek\n        }, `week-${days.length}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 19\n        }, this));\n        currentWeek = [];\n      }\n    }\n    return days;\n  };\n\n  // Check if selected day is not null and lekarz is not dentysta, pediatra, or okulista\n  if (lekarz !== \"dentysta\" && lekarz !== \"pediatra\" && lekarz !== \"okulista\") {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this); // Przejdź na stronę główną, jeśli lekarz nie jest prawidłowy\n  }\n\n  // Render HourPicker component if selectedDay is not null\n  if (selectedDay) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/hourpicker/${selectedDay}/${lekarz}`,\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n    {/* Przekierowanie do /hourpicker z wybranym dniem i lekarzem */}\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: columnDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevMonth,\n        children: \"Previous Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: `${month} ${year}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextMonth,\n        children: \"Next Month\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"calendar-table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: generateDaysInMonth()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"arL6pTZqvglgXnOBSBOJWCwTRVc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","moment","Navigate","useNavigate","useParams","jsxDEV","_jsxDEV","Calendar","_s","currentDate","setCurrentDate","Date","calendarDays","setCalendarDays","columnDate","setColumnDate","selectedDay","setSelectedDay","lekarz","navigate","formattedDays","length","format","prevMonth","prevDate","prevMonthDate","setMonth","getMonth","nextMonth","nextMonthDate","handleDayButtonClick","day","console","log","month","toLocaleString","year","getFullYear","generateDaysInMonth","firstDayOfMonth","lastDayOfMonth","daysInMonth","getDate","firstDayOfWeek","getDay","today","days","currentWeek","i","push","className","fileName","_jsxFileName","lineNumber","columnNumber","currentDay","isDayInDatabase","includes","isFutureDay","isSunday","children","onClick","to","replace","_c","$RefreshReg$"],"sources":["D:/Projects/boking_system-main/client/src/Calendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Calendar.css';\nimport moment from 'moment';\nimport { Navigate, useNavigate, useParams } from 'react-router-dom'; // Import Navigate and useParams\n\nconst Calendar = () => {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [calendarDays, setCalendarDays] = useState([]);\n  const [columnDate, setColumnDate] = useState(\"\");\n  const [selectedDay, setSelectedDay] = useState(null); // State to store selected day\n  const { lekarz } = useParams(); // Get the value of lekarz from URL\n  const navigate = useNavigate(); // Hook for programmatic navigation\n\n  useEffect(() => {\n    // Usunięto zbędne wywołanie do API /api/calendar\n    const formattedDays = []; // Dummy data to simulate calendar days\n    setCalendarDays(formattedDays); // Set dummy data\n    if (formattedDays.length > 0) {\n      setColumnDate(moment(formattedDays[0]).format('YYYY-MM-DD')); // Set columnDate from the first day\n    }\n  }, []);\n\n  const prevMonth = () => {\n    setCurrentDate(prevDate => {\n      const prevMonthDate = new Date(prevDate);\n      prevMonthDate.setMonth(prevMonthDate.getMonth() - 1);\n      return prevMonthDate;\n    });\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(prevDate => {\n      const nextMonthDate = new Date(prevDate);\n      nextMonthDate.setMonth(nextMonthDate.getMonth() + 1);\n      return nextMonthDate;\n    });\n  };\n\n  const handleDayButtonClick = (day) => {\n    console.log('Button clicked for day:', day);\n    setSelectedDay(day); // Set selected day\n  };\n\n  const month = currentDate.toLocaleString('default', { month: 'long' });\n  const year = currentDate.getFullYear();\n\n  const generateDaysInMonth = () => {\n    const firstDayOfMonth = new Date(year, currentDate.getMonth(), 1);\n    const lastDayOfMonth = new Date(year, currentDate.getMonth() + 1, 0);\n    const daysInMonth = lastDayOfMonth.getDate();\n    const firstDayOfWeek = firstDayOfMonth.getDay();\n    const today = moment().format('YYYY-MM-DD');\n\n    const days = [];\n    let currentWeek = [];\n\n    for (let i = 0; i < firstDayOfWeek; i++) {\n      currentWeek.push(<td key={`empty-${i}`} className=\"calendar-day\"></td>);\n    }\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const currentDay = moment(new Date(year, currentDate.getMonth(), i)).format('YYYY-MM-DD');\n      const isDayInDatabase = calendarDays.includes(currentDay);\n      const isFutureDay = currentDay > today;\n      const isSunday = new Date(year, currentDate.getMonth(), i).getDay() === 0; // Sprawdzenie, czy dzień to niedziela\n\n      currentWeek.push(\n        <td key={`day-${i}`} className={`calendar-day}`}>\n          {isSunday ? ( // Dodanie warunku sprawdzającego, czy dzień to niedziela\n            i\n          ) : (\n            isFutureDay ? (\n              <button onClick={() => handleDayButtonClick(currentDay)}>{i}</button>\n            ) : (\n              i\n            )\n          )}\n        </td>\n      );\n\n      if (currentWeek.length === 7 || i === daysInMonth) {\n        days.push(<tr key={`week-${days.length}`}>{currentWeek}</tr>);\n        currentWeek = [];\n      }\n    }\n\n    return days;\n  };\n\n  // Check if selected day is not null and lekarz is not dentysta, pediatra, or okulista\n  if (lekarz !== \"dentysta\" && lekarz !== \"pediatra\" && lekarz !== \"okulista\") {\n    return <Navigate to=\"/\" />; // Przejdź na stronę główną, jeśli lekarz nie jest prawidłowy\n  }\n\n  // Render HourPicker component if selectedDay is not null\n  if (selectedDay) {\n    return <Navigate to={`/hourpicker/${selectedDay}/${lekarz}`} replace />; {/* Przekierowanie do /hourpicker z wybranym dniem i lekarzem */}\n  }\n\n  return (\n    <div>\n      <h1>{columnDate}</h1>\n      <div className=\"calendar-container\">\n        <button onClick={prevMonth}>Previous Month</button>\n        <h2>{`${month} ${year}`}</h2>\n        <button onClick={nextMonth}>Next Month</button>\n        <table className=\"calendar-table\">\n          <tbody>{generateDaysInMonth()}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}